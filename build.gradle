buildscript {
  repositories {
    // maybe also add gradle's maven repo for plugins as well, cf. https://github.com/JKatzwinkel/tla-es/pull/82
    // and more specifically https://github.com/gradle/gradle/issues/22864#issuecomment-1327978524
    mavenCentral()
  }
}

plugins {
    id 'war'
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'co.uzzu.dotenv.gradle' version '2.0.0'
    id 'de.undercouch.download' version '5.4.0'
    id 'org.springframework.boot' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

group = 'org.bbaw.aaew.tla'
version = '0.0.950-dev'
sourceCompatibility = '17'

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'tla-es'
            pom {
                name = 'TLA Elasticsearch Backend'
                description = 'Elasticsearch backend for the Thesaurus Linguae Aegyptiae web component'
            }
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    implementation 'com.github.jkatzwinkel:tla-common:main-SNAPSHOT'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.apache.commons:commons-compress:1.23.0'
    implementation 'org.yaml:snakeyaml:2.0'

    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
    implementation 'org.springframework.boot:spring-boot:3.1.0'
    implementation('org.springframework.boot:spring-boot-starter-jetty:3.1.0') {
        exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api' // until jetty 12
    }
    implementation 'org.springframework.boot:spring-boot-autoconfigure:3.1.0'
    implementation 'org.springframework.data:spring-data-elasticsearch:5.1.0'
    implementation 'org.springframework:spring-webmvc:6.0.9'
    implementation 'org.springframework.boot:spring-boot-starter-logging:3.1.0'

    testImplementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test:3.1.0') {
        exclude group: 'org.xmlunit', module: 'xmlunit-core'
        exclude group: 'jakarta.xml.bind'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0-M1'
}

application {
    mainClass = 'tla.backend.App'
}

test {
    useJUnitPlatform {
      includeTags '!search'
    }
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    finalizedBy 'jacocoTestReport'
}

task testSearch(type: Test) {
    group = 'Verification'
    description = 'Runs search integration tests against populated ES instance.'
    systemProperty 'spring.profiles.active', 'search'
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    useJUnitPlatform {
      includeTags 'search'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

task testAll(type: Test) {
    group = 'Verification'
    description = 'Runs both search integration and unit tests.'
    useJUnitPlatform()
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    finalizedBy 'generateJacocoBadge'
}

springBoot {
    buildInfo()
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    environment "ES_HOST", env.fetch("ES_HOST", "localhost")
}

task downloadSample(type: Download) {
    group = 'Init'
    description = 'Download corpus sample file'
    src env.fetch("SAMPLE_URL", "http://")
    dest new File('sample.tar.gz')
    onlyIfModified true
    outputs.files(
        file("sample.tar.gz")
    )
}

clean {
    dependsOn 'cleanDownloadSample'
}

task populate {
    group = 'Init'
    description = 'Download corpus sample and ingest into database backend'
    doLast {
        bootRun.args = ['--data-file=sample.tar.gz', '--shutdown']
    }
    dependsOn 'downloadSample'
    finalizedBy 'bootRun'
}
