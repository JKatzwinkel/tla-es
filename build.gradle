plugins {
    id 'war'
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'de.undercouch.download' version '5.6.0'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'org.springframework.boot' version '3.5.0'
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

group = 'org.bbaw.aaew.tla'
version = '0.0.950-dev'
sourceCompatibility = '17'

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'tla-es'
            pom {
                name = 'TLA Elasticsearch Backend'
                description = 'Elasticsearch backend for the Thesaurus Linguae Aegyptiae web component'
            }
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'com.github.jkatzwinkel:tla-common:main-SNAPSHOT'
    implementation 'org.modelmapper:modelmapper:3.2.3'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.yaml:snakeyaml:2.4'

    implementation 'org.springframework.boot:spring-boot-starter-tomcat:3.5.0'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:3.5.0'
    implementation 'org.springframework.data:spring-data-elasticsearch:5.5.0'
    implementation 'org.springframework:spring-webmvc:6.2.7'
    implementation 'org.springframework.boot:spring-boot-starter-logging:3.5.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test:3.5.0') {
        exclude group: 'org.xmlunit', module: 'xmlunit-core'
        exclude group: 'jakarta.xml.bind'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.0'
}

application {
    mainClass = 'tla.backend.App'
}

testlogger {
    theme 'standard'
    slowThreshold 1500
    showStandardStreams false
    showFullStackTraces true
}

test {
    useJUnitPlatform {
      includeTags '!search'
    }
    finalizedBy 'jacocoTestReport'
}

task testSearch(type: Test) {
    group = 'Verification'
    description = 'Runs search integration tests against populated ES instance.'
    systemProperty 'spring.profiles.active', 'search'
    useJUnitPlatform {
      includeTags 'search'
    }
}

task testAll(type: Test) {
    group = 'Verification'
    description = 'Runs both search integration and unit tests.'
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.withType(Test) {
    environment 'ES_PORT', System.getenv('ES_PORT') ?: '9200'
    environment 'ES_HOST', System.getenv('ES_HOST') ?: 'localhost'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    finalizedBy 'generateJacocoBadge'
}

jacocoLogTestCoverage {
    maxDecimalDigits = 2
}

springBoot {
    buildInfo()
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    environment 'ES_PORT', System.getenv('ES_PORT') ?: '9200'
    environment 'ES_HOST', System.getenv('ES_HOST') ?: 'localhost'
}

task downloadSample(type: Download) {
    group = 'Init'
    description = 'Download corpus sample file'
    src System.getenv("SAMPLE_URL")
    dest new File('sample.tar.gz')
    onlyIfModified true
    outputs.files(
        file("sample.tar.gz")
    )
    onlyIf('corpus data file sample.tar.gz does not exist') {
        !file('sample.tar.gz').exists()
    }
}

clean {
    dependsOn 'cleanDownloadSample'
}

task populate {
    group = 'Init'
    description = 'Download corpus sample and ingest into database backend'
    inputs.files(
        file('sample.tar.gz')
    )
    dependsOn 'downloadSample'
    doLast {
        bootRun.args = ['--data-file=sample.tar.gz', '--shutdown']
    }
    finalizedBy 'bootRun'
}
